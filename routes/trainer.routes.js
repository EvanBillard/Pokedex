const express = require('express');
const TrainerModel = require('../models/trainer.model');
const { isAuthenticated } = require('../middlewares/auth.middleware');
const { getUserById } = require('../services/user.service');
const axios = require("axios");
const router = express.Router();

// POST /trainer - Cr√©er un dresseur
router.post('/', isAuthenticated, async (req, res) => {
  try {
    const { trainerName, imgUrl, pkmnSeen, pkmnCatch } = req.body;

    if (!trainerName || !Array.isArray(pkmnSeen) || !Array.isArray(pkmnCatch)) {
      return res.status(400).json({ message: 'Les donn√©es sont manquantes ou incorrectes.' });
    }

    const userId = req.user.userId; // Assurez-vous que `req.user.userId` est d√©fini dans le middleware
    const user = await getUserById(userId);
    if (!user) {
      return res.status(404).json({ message: 'Utilisateur non trouv√©.' });
    }

    const email = user.email; // R√©cup√©rer l'email de l'utilisateur
    const newTrainer = new TrainerModel({
      email,
      trainerName,
      imgUrl,
      pkmnSeen,
      pkmnCatch
    });

    await newTrainer.save();
    res.status(201).json({ message: 'Dresseur cr√©√© avec succ√®s', trainer: newTrainer });
  } catch (err) {
    console.error('Erreur lors de la cr√©ation du trainer :', err);
    res.status(500).json({ message: 'Erreur interne lors de la cr√©ation du dresseur', error: err.message });
  }
});

// PUT /trainer - Mettre √† jour le dresseur
router.put('/', isAuthenticated, async (req, res) => {
  try {
    const userId = req.user.userId;
    const user = await getUserById(userId);
    if (!user) {
      return res.status(404).json({ message: 'Utilisateur non trouv√©.' });
    }

    const email = user.email;
    const trainer = await TrainerModel.findOne({ email });
    if (!trainer) {
      return res.status(404).json({ message: 'Dresseur non trouv√© pour cet utilisateur.' });
    }

    trainer.trainerName = req.body.trainerName || trainer.trainerName;
    trainer.imgUrl = req.body.imgUrl || trainer.imgUrl;
    trainer.pkmnSeen = req.body.pkmnSeen || trainer.pkmnSeen;
    trainer.pkmnCatch = req.body.pkmnCatch || trainer.pkmnCatch;

    await trainer.save();
    res.status(200).json({ message: 'Dresseur mis √† jour avec succ√®s', trainer });
  } catch (err) {
    console.error('Erreur lors de la mise √† jour du dresseur :', err);
    res.status(500).json({ message: 'Erreur interne lors de la mise √† jour du dresseur', error: err.message });
  }
});

// DELETE /trainer - Supprimer le dresseur
router.delete('/', isAuthenticated, async (req, res) => {
  try {
    const userId = req.user.userId;
    const user = await getUserById(userId);
    if (!user) {
      return res.status(404).json({ message: 'Utilisateur non trouv√©.' });
    }

    const email = user.email;
    const trainer = await TrainerModel.findOne({ email });
    if (!trainer) {
      return res.status(404).json({ message: 'Dresseur non trouv√© pour cet utilisateur.' });
    }

    await trainer.deleteOne();
    res.status(200).json({ message: 'Dresseur supprim√© avec succ√®s' });
  } catch (err) {
    console.error('Erreur lors de la suppression du dresseur :', err);
    res.status(500).json({ message: 'Erreur interne lors de la suppression du dresseur', error: err.message });
  }
});

// PUT /trainer/mark - Marquer un Pok√©mon comme vu ou captur√©
router.put('/mark', isAuthenticated, async (req, res) => {
  try {
    const { pokemonName, isCaptured } = req.body; // Pok√©mon √† ajouter et le statut isCaptured
    if (!pokemonName || typeof isCaptured !== 'boolean') {
      return res.status(400).json({ message: 'Param√®tres invalides. Assurez-vous de fournir un nom de Pok√©mon et le statut isCaptured.' });
    }

    const userId = req.user.userId;
    const user = await getUserById(userId);
    if (!user) {
      return res.status(404).json({ message: 'Utilisateur non trouv√©.' });
    }

    const email = user.email;
    const trainer = await TrainerModel.findOne({ email });
    if (!trainer) {
      return res.status(404).json({ message: 'Dresseur non trouv√© pour cet utilisateur.' });
    }

    // Ajouter le Pok√©mon dans la liste appropri√©e (vu ou captur√©)
    if (isCaptured) {
      if (!trainer.pkmnCatch.includes(pokemonName)) {
        trainer.pkmnCatch.push(pokemonName); // Ajouter √† la liste des captur√©s
      }
    } else {
      if (!trainer.pkmnSeen.includes(pokemonName)) {
        trainer.pkmnSeen.push(pokemonName); // Ajouter √† la liste des vus
      }
    }

    await trainer.save();
    res.status(200).json({ message: 'Pok√©mon ajout√© avec succ√®s', trainer });
  } catch (err) {
    console.error('Erreur lors de la mise √† jour des Pok√©mon :', err);
    res.status(500).json({ message: 'Erreur interne lors de la mise √† jour des Pok√©mon', error: err.message });
  }
});





// üîπ R√©cup√©rer les Pok√©mon vus et captur√©s d'un dresseur
router.get("/me/pokedex", isAuthenticated, async (req, res) => {
  try {
    console.log("Utilisateur authentifi√©:", req.user);

    // √âtape 1 : R√©cup√©rer le dresseur via l'ID de l'utilisateur authentifi√©
    const trainer = await TrainerModel.findOne({ userId: req.user.id });  // Utilisation de req.user.id pour r√©cup√©rer le dresseur

    if (!trainer) {
      return res.status(404).json({ message: "Dresseur non trouv√©" });
    }

    // Retourne les Pok√©mon vus et captur√©s
    res.json({
      pkmnSeen: trainer.pkmnSeen,
      pkmnCatch: trainer.pkmnCatch
    });

  } catch (err) {
    console.error("Erreur lors de la r√©cup√©ration du Pok√©dex:", err);
    res.status(500).json({ message: "Erreur serveur" });
  }
});




module.exports = router;

